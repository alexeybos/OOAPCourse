public abstract class AbstractParentQueue<T> {

    // статусы
    public static final int REMOVE_FRONT_ERR = 1; // очередь пуста
    public static final int REMOVE_FRONT_OK = 2; // успешно

    public static final int GET_FRONT_ERR = 1; // очередь пуста
    public static final int GET_FRONT_OK = 2; // успешно

    // конструктор
    // постусловие: создана пустая очередь
    //public abstract AbstractParentQueue<T> AbstractParentQueue();

    // команды
    // предусловие: -
    // постусловие: в хвост очереди добавлен элемент
    public abstract void addTail(T item);

    // предусловие: очередь не пустая
    // постусловие: из головы очереди удален элемент
    public abstract void removeFront();

    // запросы
    // предусловие: очередь не пустая
    public abstract T getFront(); // возвращает элемент из головы очереди

    public abstract int size(); // возвращает размер очереди

    //дополнительные запросы
    public abstract int getRemoveFrontStatus(); // возвращает статус команды removeFront()
    public abstract int getGetFrontStatus(); // возвращает статус команды getFront()
}

public abstract class AbstractQueue<T> extends AbstractParentQueue<T> {

    // конструктор
    // постусловие: создана пустая очередь
    //public abstract AbstractQueue<T> AbstractQueue();

}

public abstract class AbstractDeque<T> extends AbstractParentQueue<T> {

    private static final int REMOVE_TAIL_ERR = 1; // очередь пуста
    private static final int REMOVE_TAIL_OK = 2; // успешно

    private static final int GET_TAIL_ERR = 1; // очередь пуста
    private static final int GET_TAIL_OK = 2; // успешно

    // конструктор
    // постусловие: создана пустая двусторонняя очередь
    //public abstract AbstractDeque<T> AbstractDeque();

    // постусловие: в голову очереди добавлен новый элемент
    public abstract void addFront(T item);

    // предусловие: очередь не пуста
    // постусловие: из хвоста очереди удален элемент
    public abstract void removeTail();

    // предусловие: очередь не пуста
    public abstract T getTail(); // получить элемент из хвоста очереди

    public abstract int getRemoveTailStatus(); // получить статус removeTail()
    public abstract int getGetTailStatus(); // получить статус getTail()
}
